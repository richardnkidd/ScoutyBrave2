# Fix Instructions for Scouty The Brave on Replit

## Step 1: Create the HTML file
Create a new file `client/index.html` with this content:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scouty The Brave</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #000;
        }
        #game-container {
            position: relative;
            width: 800px;
            height: 600px;
        }
        #game-canvas {
            display: block;
            image-rendering: pixelated;
            image-rendering: crisp-edges;
        }
    </style>
</head>
<body>
    <div id="game-container">
        <canvas id="game-canvas"></canvas>
    </div>
    <script type="module" src="/src/game/main.js"></script>
</body>
</html>
```

## Step 2: Update Vite configuration
Update `client/vite.config.ts` to handle the HTML entry point:

```typescript
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  server: {
    proxy: {
      "/api": {
        target: "http://localhost:5000",
        changeOrigin: true,
      },
    },
  },
  build: {
    rollupOptions: {
      input: {
        main: path.resolve(__dirname, 'index.html'),
      },
    },
  },
});
```

## Step 3: Create placeholder assets
In the `client/public` folder, create these directories and files:

```
client/public/
├── sounds/
│   ├── hit.mp3 (create empty file or use any sound)
│   ├── success.mp3 (create empty file or use any sound)
│   └── background.mp3 (create empty file or use any sound)
├── bg-layer1.png (create a simple background image)
└── bg-layer2.png (create a simple background image)
```

For quick placeholder images, create simple PNGs:
- `bg-layer1.png`: 800x600px light blue image
- `bg-layer2.png`: 800x600px with some cloud shapes

## Step 4: Fix the game initialization
Update `client/src/game/main.js`:

```javascript
import kaplay from 'kaplay';
import { CONFIG } from './config.js';
import { createPlayer, setupPlayerControls } from './player.js';
import { createObstacleSystem, setupCollisions } from './obstacles.js';
import { createUI } from './ui.js';
import { createGameOverScene, createMainGameScene } from './scenes.js';

// Global game state
const gameState = {
    fear: 0,
    score: 0,
    gameTime: 0
};

// Initialize KAPLAY
let k;

// Load assets
function loadAssets() {
    try {
        // Make loading optional - game will work without assets
        k.loadSprite("bg-layer1", "/bg-layer1.png").catch(() => {
            console.log("bg-layer1 not found, using fallback");
        });
        k.loadSprite("bg-layer2", "/bg-layer2.png").catch(() => {
            console.log("bg-layer2 not found, using fallback");
        });
    } catch (e) {
        console.log("Could not load sprites:", e);
    }

    try {
        k.loadSound("hit", "/sounds/hit.mp3").catch(() => {
            console.log("hit sound not found");
        });
        k.loadSound("success", "/sounds/success.mp3").catch(() => {
            console.log("success sound not found");
        });
        k.loadSound("background", "/sounds/background.mp3").catch(() => {
            console.log("background sound not found");
        });
    } catch (e) {
        console.log("Could not load sounds:", e);
    }
}

// Initialize the game
function initGame() {
    console.log("Initializing Scouty The Brave...");
    
    const canvas = document.getElementById("game-canvas");
    if (!canvas) {
        console.error("Canvas element not found! Make sure there's an element with id='game-canvas'");
        return;
    }
    
    // Initialize KAPLAY with the canvas
    k = kaplay({
        width: CONFIG.CANVAS_WIDTH,
        height: CONFIG.CANVAS_HEIGHT,
        background: [135, 206, 235], // Sky blue
        gravity: CONFIG.GRAVITY,
        debug: false,
        canvas: canvas,
        crisp: true
    });
    
    console.log("KAPLAY initialized successfully");
    
    // Load assets
    loadAssets();
    
    // Create scenes
    createGameOverScene(k, gameState, null);
    createMainGameScene(k, gameState, createPlayer, setupPlayerControls, createObstacleSystem, setupCollisions, createUI);
    
    // Start the game after a short delay to ensure assets start loading
    setTimeout(() => {
        k.go("game");
        console.log("Game started! Use WASD or arrow keys to move, Space to jump.");
    }, 100);
}

// Start the game when the page loads
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initGame);
} else {
    initGame();
}

// Export for debugging
window.gameState = gameState;
window.k = k;
```

## Step 5: Fix asset loading in scenes.js
Update `client/src/game/scenes.js` to handle missing assets gracefully:

```javascript
import { CONFIG } from './config.js';

export function createGameOverScene(k, gameState, obstacleSystem) {
    k.scene("gameover", () => {
        console.log("Game Over! Final score:", Math.floor(gameState.score));

        // Dark overlay
        k.add([
            k.rect(k.width(), k.height()),
            k.pos(0, 0),
            k.color(0, 0, 0),
            k.opacity(0.7),
            k.fixed()
        ]);

        // Game Over title
        k.add([
            k.text("GAME OVER", { size: 48 }),
            k.pos(k.center()),
            k.anchor("center"),
            k.color(255, 0, 0),
            k.fixed()
        ]);
        
        // Final score
        k.add([
            k.text(`Final Score: ${Math.floor(gameState.score)}`, { size: 24 }),
            k.pos(k.center().x, k.center().y + 60),
            k.anchor("center"),
            k.color(255, 255, 255),
            k.fixed()
        ]);
        
        // Restart instruction
        k.add([
            k.text("Press R to restart", { size: 20 }),
            k.pos(k.center().x, k.center().y + 100),
            k.anchor("center"),
            k.color(200, 200, 200),
            k.fixed()
        ]);

        // Additional stats
        k.add([
            k.text(`Fear Level: ${Math.floor(gameState.fear)}%`, { size: 18 }),
            k.pos(k.center().x, k.center().y + 140),
            k.anchor("center"),
            k.color(255, 255, 0),
            k.fixed()
        ]);
        
        // Restart functionality
        k.onKeyPress("r", () => {
            console.log("Restarting game...");
            
            // Reset game state
            gameState.fear = 0;
            gameState.score = 0;
            gameState.gameTime = 0;
            
            // Reset obstacle system
            if (obstacleSystem && obstacleSystem.resetSpeed) {
                obstacleSystem.resetSpeed();
            }
            
            // Go back to main game
            k.go("game");
        });
    });
}

export function createMainGameScene(k, gameState, createPlayer, setupPlayerControls, createObstacleSystem, setupCollisions, createUI) {
    k.scene("game", () => {
        console.log("Starting main game scene");

        // Always create a background, even if sprites don't load
        k.add([
            k.rect(k.width(), k.height()),
            k.pos(0, 0),
            k.color(135, 206, 235), // Sky blue
            k.fixed(),
            k.z(-10)
        ]);
        
        // Try to add sprite backgrounds if they loaded
        if (k.getSprite("bg-layer1")) {
            k.add([
                k.sprite("bg-layer1"),
                k.pos(0, 0),
                k.scale(1),
                k.fixed(),
                k.z(-2)
            ]);
        }
        
        if (k.getSprite("bg-layer2")) {
            k.add([
                k.sprite("bg-layer2"), 
                k.pos(0, 0),
                k.scale(1),
                k.fixed(),
                k.z(-1)
            ]);
        }

        // Create ground
        const ground = k.add([
            k.rect(k.width(), CONFIG.GROUND_HEIGHT),
            k.pos(0, k.height() - CONFIG.GROUND_HEIGHT),
            k.area(),
            k.body({ isStatic: true }),
            k.color(34, 139, 34), // Green
            "ground"
        ]);

        console.log("Ground created at height:", CONFIG.GROUND_HEIGHT);

        // Create player
        const player = createPlayer(k);
        setupPlayerControls(k, player);

        // Create obstacle system
        const obstacleSystem = createObstacleSystem(k, gameState);

        // Setup collisions
        setupCollisions(k, player, gameState);

        // Create UI
        const ui = createUI(k, gameState);

        // Game update loop
        k.onUpdate(() => {
            // Update UI
            ui.update();
            
            // Check game over condition
            if (gameState.fear >= 100) {
                console.log("Fear reached 100%, game over!");
                k.go("gameover");
            }

            // Keep player within screen bounds
            if (player.pos.x < 0) {
                player.pos.x = 0;
            } else if (player.pos.x > k.width() - CONFIG.PLAYER_WIDTH) {
                player.pos.x = k.width() - CONFIG.PLAYER_WIDTH;
            }
        });
    });
}
```

## Step 6: Update package.json
Make sure KAPLAY is installed. In `client/package.json`, add to dependencies:

```json
"kaplay": "^3000.1.17"
```

## Step 7: Run the commands in Replit Shell

```bash
cd client
npm install kaplay
npm run dev
```

## Quick Alternative: Minimal Working Version
If you want to get it working immediately without assets, create these two files:

1. `client/game.html`:
```html
<!DOCTYPE html>
<html>
<head>
    <title>Scouty The Brave</title>
    <style>
        body { margin: 0; padding: 0; background: #000; display: flex; justify-content: center; align-items: center; height: 100vh; }
        canvas { border: 2px solid #333; }
    </style>
</head>
<body>
    <canvas id="game-canvas"></canvas>
    <script src="https://unpkg.com/kaplay@3000.1.17/dist/kaplay.js"></script>
    <script type="module" src="/src/game/main.js"></script>
</body>
</html>
```

2. Update your Replit's `.replit` file to serve the game:
```
run = "cd client && python3 -m http.server 8000"
```

Then access your game at the URL Replit provides on port 8000.

## Troubleshooting
- If you see "Canvas element not found", make sure the HTML file is being served
- If assets fail to load, the game will still work with colored rectangles
- Check the browser console for any JavaScript errors
- Make sure all file paths are correct (case-sensitive on some systems)